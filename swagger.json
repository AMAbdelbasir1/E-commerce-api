{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "E-commerce API",
    "description": "API for managing E-commerce data"
  },
  "host": "e-commerce-api-5jnt.onrender.com",
  "basePath": "/",
  "schemes": ["https"],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/api/v1/categories": {
      "get": {
        "tags": ["categories"],
        "summary": "Get all categories",
        "responses": {
          "200": {
            "description": "Returns a list of categories",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["categories"],
        "summary": "Create a new category",
        "parameters": [
          {
            "name": "categories",
            "in": "body",
            "description": "category object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created category",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        }
      }
    },
    "/api/v1/categories/{id}": {
      "get": {
        "tags": ["categories"],
        "summary": "Get a category by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "category ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested category",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "404": {
            "description": "category not found"
          }
        }
      },
      "put": {
        "tags": ["categories"],
        "summary": "Update a category by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "category ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "category",
            "in": "body",
            "description": "category object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated category",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "404": {
            "description": "category not found"
          }
        }
      },
      "delete": {
        "tags": ["categories"],
        "summary": "Delete a category by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "category ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "category deleted"
          },
          "404": {
            "description": "category not found"
          }
        }
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "Create a new user",
        "parameters": [
          {
            "name": "signup",
            "in": "body",
            "description": "signup object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUpInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created category",
            "schema": {
              "$ref": "#/definitions/signup"
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login user",
        "parameters": [
          {
            "name": "login",
            "in": "body",
            "description": "login object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created category",
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        }
      }
    },
    "/api/v1/users/getMe": {
      "get": {
        "tags": ["Auth"],
        "summary": "get user's login",
        "responses": {
          "200": {
            "description": "Returns the user's information"
          }
        }
      }
    },
    "/api/v1/auth/forgotPassword": {
      "post": {
        "tags": ["Auth"],
        "summary": "forgot Password user ",
        "parameters": [
          {
            "name": "forgotPassword",
            "in": "body",
            "description": "forgot Password object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/forgotPasswordInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the succsses send code to email",
            "schema": {
              "$ref": "#/definitions/forgotPassword"
            }
          }
        }
      }
    },
    "/api/v1/auth/verifyResetCode": {
      "post": {
        "tags": ["Auth"],
        "summary": "verify Reset Code",
        "parameters": [
          {
            "name": "verifyResetCode",
            "in": "body",
            "description": "verify Reset Code that send to user at email",
            "required": true,
            "schema": {
              "$ref": "#/definitions/verifyResetCodeInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created category",
            "schema": {
              "$ref": "#/definitions/verifyResetCode"
            }
          }
        }
      }
    },
    "/api/v1/auth/resetPassword": {
      "post": {
        "tags": ["Auth"],
        "summary": "reset Password user ",
        "parameters": [
          {
            "name": "resetPassword",
            "in": "body",
            "description": "reset Password object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resetPasswordInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the succsses reset Password",
            "schema": {
              "$ref": "#/definitions/resetPassword"
            }
          }
        }
      }
    },
    "/api/v1/subcategories": {
      "get": {
        "tags": ["subcategories"],
        "summary": "Get all subcategories",
        "responses": {
          "200": {
            "description": "Returns a list of subcategories",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subcategory"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["subcategories"],
        "summary": "Create a new subcategory",
        "parameters": [
          {
            "name": "subcategory",
            "in": "body",
            "description": "category object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subcategoryInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created category",
            "schema": {
              "$ref": "#/definitions/subcategory"
            }
          }
        }
      }
    },
    "/api/v1/categories/{categoryId}/subcategories": {
      "get": {
        "tags": ["subcategories"],
        "summary": "Get all subcategories belong to category",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "category ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of subcategories",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subcategory"
              }
            }
          }
        }
      }
    },
    "/api/v1/subcategories/{id}": {
      "get": {
        "tags": ["subcategories"],
        "summary": "Get a subcategory by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "subcategory ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested category",
            "schema": {
              "$ref": "#/definitions/subcategory"
            }
          },
          "404": {
            "description": "subcategory not found"
          }
        }
      },
      "put": {
        "tags": ["subcategories"],
        "summary": "Update a subcategory by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "subcategory ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "subcategory",
            "in": "body",
            "description": "subcategory object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subcategoryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated category",
            "schema": {
              "$ref": "#/definitions/subcategory"
            }
          },
          "404": {
            "description": "category not found"
          }
        }
      },
      "delete": {
        "tags": ["subcategories"],
        "summary": "Delete a subcategory by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "subcategory ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "subcategory deleted"
          },
          "404": {
            "description": "category not found"
          }
        }
      }
    },
    "/api/v1/brands": {
      "get": {
        "tags": ["Brands"],
        "summary": "Get all Brands",
        "responses": {
          "200": {
            "description": "Returns a list of Brands",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Brand"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Brands"],
        "summary": "Create a new Brand",
        "parameters": [
          {
            "name": "Brands",
            "in": "body",
            "description": "category object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrandInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created Brand",
            "schema": {
              "$ref": "#/definitions/Brand"
            }
          }
        }
      }
    },
    "/api/v1/brands/{id}": {
      "get": {
        "tags": ["Brands"],
        "summary": "Get a Brand by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Brand's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Brand",
            "schema": {
              "$ref": "#/definitions/Brand"
            }
          },
          "404": {
            "description": "Brand not found"
          }
        }
      },
      "put": {
        "tags": ["Brands"],
        "summary": "Update a Brand by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Brand's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Brand",
            "in": "body",
            "description": "Brand object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrandInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated Brand",
            "schema": {
              "$ref": "#/definitions/Brand"
            }
          },
          "404": {
            "description": "Brand not found"
          }
        }
      },
      "delete": {
        "tags": ["Brands"],
        "summary": "Delete a Brand by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Brand's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Brand deleted"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      }
    },
    "/api/v1/products": {
      "get": {
        "tags": ["products"],
        "summary": "Get all products",
        "responses": {
          "200": {
            "description": "Returns a list of products",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/product"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["products"],
        "summary": "Create a new product",
        "parameters": [
          {
            "name": "product",
            "in": "body",
            "description": "product object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/productInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created product",
            "schema": {
              "$ref": "#/definitions/product"
            }
          }
        }
      }
    },
    "/api/v1/products/{id}": {
      "get": {
        "tags": ["products"],
        "summary": "Get a product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "product's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested product",
            "schema": {
              "$ref": "#/definitions/product"
            }
          },
          "404": {
            "description": "product not found"
          }
        }
      },
      "put": {
        "tags": ["products"],
        "summary": "Update a product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "product's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "product",
            "in": "body",
            "description": "product object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/productInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated product",
            "schema": {
              "$ref": "#/definitions/product"
            }
          },
          "404": {
            "description": "product not found"
          }
        }
      },
      "delete": {
        "tags": ["products"],
        "summary": "Delete a product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "product's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "product deleted"
          },
          "404": {
            "description": "product not found"
          }
        }
      }
    },
    "/api/v1/products/{productId}/reviews": {
      "get": {
        "tags": ["reviews"],
        "summary": "Get all reviews",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "product's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of reviews",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Review"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["reviews"],
        "summary": "Create a new review",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "product's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "reviews",
            "in": "body",
            "description": "review object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created product",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        }
      }
    },
    "/api/v1/products/{productId}/reviews/{id}": {
      "get": {
        "tags": ["reviews"],
        "summary": "Get a review by ID",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "product's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "review's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested review",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        }
      },
      "put": {
        "tags": ["reviews"],
        "summary": "Update a review by ID",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "product's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "review's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "reviews",
            "in": "body",
            "description": "review object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated review",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          "404": {
            "description": "review not found"
          }
        }
      },
      "delete": {
        "tags": ["reviews"],
        "summary": "Delete a review by ID",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "product's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "review's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "review deleted"
          },
          "404": {
            "description": "review not found"
          }
        }
      }
    },
    "/api/v1/coupons": {
      "get": {
        "tags": ["coupons"],
        "summary": "Get all coupons",
        "responses": {
          "200": {
            "description": "Returns a list of coupons",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coupon"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["coupons"],
        "summary": "Create a new coupon",
        "parameters": [
          {
            "name": "coupon",
            "in": "body",
            "description": "coupon object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/couponInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created coupons",
            "schema": {
              "$ref": "#/definitions/coupon"
            }
          }
        }
      }
    },
    "/api/v1/coupons/{id}": {
      "get": {
        "tags": ["coupons"],
        "summary": "Get a coupon by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "coupon's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested coupons",
            "schema": {
              "$ref": "#/definitions/coupon"
            }
          }
        }
      },
      "put": {
        "tags": ["coupons"],
        "summary": "Update a coupon by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "coupon's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "coupon",
            "in": "body",
            "description": "coupon object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/couponInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated coupon",
            "schema": {
              "$ref": "#/definitions/coupon"
            }
          }
        }
      },
      "delete": {
        "tags": ["coupons"],
        "summary": "Delete a coupon by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "coupon's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "coupon deleted"
          }
        }
      }
    },
    "/api/v1/addresses": {
      "get": {
        "tags": ["addresses"],
        "summary": "Get all addresses",
        "responses": {
          "200": {
            "description": "Returns a list of addresses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/address"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["addresses"],
        "summary": "Create a new address",
        "parameters": [
          {
            "name": "address",
            "in": "body",
            "description": "address object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addressInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created coupons",
            "schema": {
              "$ref": "#/definitions/address"
            }
          }
        }
      }
    },
    "/api/v1/addresses/{id}": {
      "delete": {
        "tags": ["addresses"],
        "summary": "Delete a address by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "address's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },"/api/v1/wishlist": {
      "get": {
        "tags": ["wishlist"],
        "summary": "Get my wishlist",
        "responses": {
          "200": {
            "description": "Returns a object of my wishlist",
            "schema": {
                "$ref": "#/definitions/wishlist"
            }
          }
        }
      },
      "post": {
        "tags": ["wishlist"],
        "summary": "add product to my wishlist",
        "parameters": [
          {
            "name": "wishlist",
            "in": "body",
            "description": "wishlist object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/wishlistInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product added successfully to your wishlist.",
            "schema": {
              "$ref": "#/definitions/wishlist"
            }
          }
        }
      }
    },
    "/api/v1/wishlist/{productId}": {
      "delete": {
        "tags": ["wishlist"],
        "summary": "Delete a address by ID",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "product's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/v1/cart": {
      "get": {
        "tags": ["cart"],
        "summary": "Get my cart",
        "responses": {
          "200": {
            "description": "Returns a object of my cart",
            "schema": {
                "$ref": "#/definitions/cart"
            }
          }
        }
      },
      "post": {
        "tags": ["cart"],
        "summary": "add product to my cart",
        "parameters": [
          {
            "name": "cart",
            "in": "body",
            "description": "cart object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cartInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product added successfully to your cart.",
            "schema": {
              "$ref": "#/definitions/cart"
            }
          }
        }
      },
      "delete": {
        "tags": ["cart"],
        "summary": "clear cart",
        "responses": {
          "204": {
            "description": "cart deleted"
          }
        }
      }
    },
    "/api/v1/cart/{itemId}": {
      "put": {
        "tags": ["cart"],
        "summary": "Update item's quantity at my cart by ID",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "item's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "cart",
            "in": "body",
            "description": "coupon object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/quantity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated item",
            "schema": {
              "$ref": "#/definitions/cart"
            }
          }
        }
      },
      "delete": {
        "tags": ["cart"],
        "summary": "Delete a item by ID",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "coupon's ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "coupon deleted"
          }
        }
      }
    },
    "/api/v1/cart/applyCoupon": {
      "put": {
        "tags": ["cart"],
        "summary": "applyCoupon",
        "parameters": [
          {
            "name": "coupon",
            "in": "body",
            "description": "coupon object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/couponName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "coupon deleted"
          }
        }
      }
    }
  },
  "definitions": {
    "CategoryInput": {
      "type": "object",
      "required": ["name", "image"],
      "properties": {
        "name": {
          "type": "string",
          "description": "category's name"
        },
        "image": {
          "type": "string",
          "description": "URL of category's Category image"
        }
      }
    },
    "Category": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryInput"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "category's unique ID"
            }
          }
        }
      ]
    },
    "subcategoryInput": {
      "type": "object",
      "required": ["name", "categoryId"],
      "properties": {
        "name": {
          "type": "string",
          "description": "subcategory's name"
        },
        "categoryId": {
          "type": "string",
          "description": "category's Id"
        }
      }
    },
    "subcategory": {
      "allOf": [
        {
          "$ref": "#/definitions/subcategoryInput"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "category's unique ID"
            }
          }
        }
      ]
    },
    "SignUpInput": {
      "type": "object",
      "required": ["name", "email", "password", "passwordConfirm"],
      "properties": {
        "name": {
          "type": "string",
          "description": "User's name"
        },
        "email": {
          "type": "string",
          "description": "User's email"
        },
        "password": {
          "type": "string",
          "description": "User's password"
        },
        "passwordConfirm": {
          "type": "string",
          "description": "confirm User's password"
        }
      }
    },
    "signup": {
      "allOf": [
        {
          "$ref": "#/definitions/SignUpInput"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "User's unique ID"
            }
          }
        }
      ]
    },
    "loginInput": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "description": "User's email"
        },
        "password": {
          "type": "string",
          "description": "User's password"
        }
      }
    },
    "login": {
      "allOf": [
        {
          "$ref": "#/definitions/loginInput"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "User's unique ID"
            }
          }
        }
      ]
    },
    "forgotPasswordInput": {
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string",
          "description": "User's email"
        }
      }
    },
    "forgotPassword": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Reset code sent to email"
        }
      }
    },
    "verifyResetCodeInput": {
      "type": "object",
      "required": ["resetCode"],
      "properties": {
        "resetCode": {
          "type": "integer",
          "example": 345577,
          "description": "User's resetCode"
        }
      }
    },
    "verifyResetCode": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "status": "Success",
          "description": "resetCode"
        }
      }
    },
    "resetPasswordInput": {
      "type": "object",
      "required": ["email", "newPassword"],
      "properties": {
        "email": {
          "type": "string",
          "description": "User's email"
        },
        "newPassword": {
          "type": "string",
          "description": "new User's password"
        }
      }
    },
    "resetPassword": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "User's unique token"
        }
      }
    },
    "BrandInput": {
      "type": "object",
      "required": ["name", "image"],
      "properties": {
        "name": {
          "type": "string",
          "description": "category's name"
        },
        "image": {
          "type": "string",
          "description": "URL of category's Category image"
        }
      }
    },
    "Brand": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryInput"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "category's unique ID"
            }
          }
        }
      ]
    },
    "productInput": {
      "type": "object",
      "required": [
        "title",
        "description",
        "quantity",
        "sold",
        "price",
        "category",
        "color",
        "imageCover",
        "images"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "samsung A13",
          "description": "product's name"
        },
        "description": {
          "type": "string",
          "example": "Black 64GB 4G Ram",
          "description": "product's description"
        },
        "quantity": {
          "type": "integer",
          "example": 5,
          "description": "product's quantity"
        },
        "sold": {
          "type": "integer",
          "example": 3,
          "description": "product's sold"
        },
        "price": {
          "type": "integer",
          "example": 5600,
          "description": "product's price"
        },
        "category": {
          "type": "string",
          "example": "644585b46236e1670b2ce6c3",
          "description": "product's description"
        },
        "colors": {
          "type": "string",
          "example": "Black",
          "description": "product's description"
        },
        "subcategories": {
          "type": "array",
          "example": ["644585b46236e1670b2ce6c3", "644585b46236e1670b2ce6c3"],
          "description": "product's imageCover"
        },
        "imageCover": {
          "type": "string",
          "example": "https://e-commerce-api-5jnt.onrender.com/products/https://fakestoreapi.com/img/71li-ujtlUL._AC_UX679_.jpg",
          "description": "product's imageCover"
        },
        "images": {
          "type": "array",
          "example": [
            "https://e-commerce-api-5jnt.onrender.com/products/https://fakestoreapi.com/img/71li-ujtlUL._AC_UX679_.jpg"
          ],
          "description": "URL of product's image"
        }
      }
    },
    "product": {
      "allOf": [
        {
          "$ref": "#/definitions/productInput"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "category's unique ID"
            }
          }
        }
      ]
    },
    "ReviewInput": {
      "type": "object",
      "required": ["title", "ratings"],
      "properties": {
        "title": {
          "type": "string",
          "example": "samsung A13",
          "description": "product's name"
        },
        "ratings": {
          "type": "integer",
          "example": 3,
          "description": "product's sold"
        }
      }
    },
    "Review": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewInput"
        },
        {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "document's unique ID"
            }
          }
        }
      ]
    },
    "couponInput": {
      "type": "object",
      "required": ["name", "expire", "discount"],
      "properties": {
        "name": {
          "type": "string",
          "example": "Happy day",
          "description": "coupons's name"
        },
        "expire": {
          "type": "string",
          "example": "dd/mm/yyyy",
          "description": "coupons's expire"
        },
        "discount": {
          "type": "integer",
          "example": 20,
          "description": "coupons's discount"
        }
      }
    },
    "coupon": {
      "allOf": [
        {
          "$ref": "#/definitions/couponInput"
        },
        {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "document's unique ID"
            }
          }
        }
      ]
    },
    "addressInput": {
      "type": "object",
      "required": ["alias", "details","city", "phone"],
      "properties": {
        "alias": {
          "type": "string",
          "example": "Garden City - Cairo - Egypt",
          "description": "coupons's name"
        },
        "details": {
          "type": "string",
          "example": "20, Aisha Eltaymourea St.,12th Floor - Garden City - Cairo - Egypt",
          "description": "coupons's expire"
        },
        "city": {
          "type": "string",
          "example": "cairo",
          "description": "coupons's expire"
        },
        "phone": {
          "type": "string",
          "example": "01234567890",
          "description": "coupons's expire"
        }
      }
    },
    "address": {
      "allOf": [
        {
          "$ref": "#/definitions/addressInput"
        },
        {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "document's unique ID"
            }
          }
        }
      ]
    },
    "wishlistInput": {
      "type": "object",
      "required": ["productId"],
      "properties": {
        "productId": {
          "type": "string",
          "example": "645617c543f83fdcdd638440",
          "description": "product's ID"
        }
      }
    },
    "wishlist": {
      "allOf": [
        {
          "$ref": "#/definitions/wishlistInput"
        },
        {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "document's unique ID"
            }
          }
        }
      ]
    },
    "cartInput": {
      "type": "object",
      "required": ["productId","color"],
      "properties": {
        "productId": {
          "type": "string",
          "example": "645617c543f83fdcdd638440",
          "description": "product's ID"
        }, "color": {
          "type": "string",
          "example": "red",
          "description": "product's color"
        }
      }
    },
    "cart": {
      "allOf": [
        {
          "$ref": "#/definitions/cartInput"
        },
        {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "document's unique ID"
            }
          }
        }
      ]
    },
    "couponName": {
      "type": "object",
      "required": ["productId"],
      "properties": {
        "productId": {
          "type": "string",
          "example": "Happy day",
          "description": "coupons's name"
        }
      }
    },
    "quantity": {
      "type": "object",
      "required": ["quantity"],
      "properties": {
        "quantity": {
          "type": "integer",
          "example": 4,
          "description": "quantity's number"
        }
      }
    }
  }
}
